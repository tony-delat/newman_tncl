{
	"info": {
		"_postman_id": "6dd1030d-7cb4-4da3-a396-57ece2c0c9d3",
		"name": "TodoistTNCLexercise",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TASKS",
			"item": [
				{
					"name": "Create Task",
					"item": [
						{
							"name": "Create a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.environment.set(\"taskId\", jsonData[\"id\"]);\r",
											"var con = jsonData[\"content\"];\r",
											"var priority = jsonData[\"priority\"];\r",
											"\r",
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Task name assigned correctly\", function () {\r",
											"    pm.expect(jsonData[\"content\"]).to.include(pm.environment.get(\"taskName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"number\" }        \r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Validate schema is an object\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Priority value equals 1\", function () {\r",
											"    pm.expect(priority).eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{taskName}}\",\r\n    \"project_id\": {{projectId}},\r\n    \"due_string\": \"tomorrow at 12:00\",\r\n    \"due_lang\": \"en\",\r\n    \"priority\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a task - empty content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"\",\r\n    \"project_id\": {{projectId}},\r\n    \"due_string\": \"tomorrow at 12:00\",\r\n    \"due_lang\": \"en\",\r\n    \"priority\": 4\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Task",
					"item": [
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate received response body is empty\", () => {\r",
											"    pm.expect(responseBody.length).eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 4XX - Not successful\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"Ir a trabajar5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tasks/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Active Tasks",
					"item": [
						{
							"name": "Get all active tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"        \"properties\": {\r",
											"        \"id\": { \"type\": \"number\" }        \r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Validate schema is an array\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 4XX - Not successful\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get An Active Task",
					"item": [
						{
							"name": "Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"number\" }        \r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Validate schema is an object\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 4XX - Not successful\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change Status To Complete",
					"item": [
						{
							"name": "Complete a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate received response body is empty\", () => {\r",
											"    pm.expect(responseBody.length).eql(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 50ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks/{{taskId}}/close",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen A Task",
					"item": [
						{
							"name": "Reopen a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate received response body is empty\", () => {\r",
											"    pm.expect(responseBody.length).eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 50ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks/{{taskId}}/reopen",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"{{taskId}}",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete A Task",
					"item": [
						{
							"name": "Delete a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2XX\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate received response body is empty\", () => {\r",
											"    pm.expect(responseBody.length).eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 50ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "projectId",
			"value": "",
			"disabled": true
		}
	]
}